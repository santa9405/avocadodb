/* VIEW(뷰)
   - SELECT문의 실행 결과(RESULT SET)를 저장한 논리적인 가상 테이블 객체
   
   - 실질적으로 데이터를 저장하고 있지 않음
   
   - 테이블을 사용하는 것과 동일하게 사용할 수 있음
   
   
   * VIEW 사용 목적
     1) 복잡한 SELECT 쿼리문을 단순화하여 쉽게 사용
     2) 테이블의 진짜 모습을 감출 수 있어 보안상 유리함
     
   * VIEW의 단점
     1) ALTER 구문을 사용할 수 없다.(VIEW는 가상 테이블 이므로 수정 불가능)
     2) VIEW를 이용한 DML을 사용할 수는 있으나 제약이 따름
       -> SINGLE TABLE VIEW에서만 부분적으로 DML 사용 가능
       
   ** 실제적으로 VIEW를 이용한 DML은 지양되고 있으며
       SELECT 용도로만 사용함

    [작성법]
    CREATE [OR REPLACE] VIEW 뷰이름
    AS 서브쿼리;
*/

-- 1. VIEW 사용 예시

-- 모든 사번, 이름, 부서명, 근무지역을 조회하는 SELECT문 작성 후
-- 해당 결과를 VIEW로 생성해서 저장
CREATE VIEW V_EMPLOYEE
AS
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, NATIONAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
LEFT JOIN LOCATION ON(LOCATION_ID=LOCAL_CODE)
LEFT JOIN NATIONAL USING(NATIONAL_CODE);
-- ORA-01031: insufficient privileges : 뷰 생성 권한이 없음
--> sys as sysdba로 접속을 전환한 후 kh 계정에 VIEW 생성 권한을 부여
GRANT CREATE VIEW TO kh;
--> 다시 kh 계정으로 접속 변경 후 위에 있는 VIEW 생성 구문을 다시 실행
--View V_EMPLOYEE이(가) 생성되었습니다.

SELECT * FROM V_EMPLOYEE;

-- * VIEW는 가상의 테이블이다.
--> 실제 존재하는 테이블이 아니라
-- 기반이 되는 테이블들의 데이터를 이용해서 결과를 보여주는 것

COMMIT;

-- 사번이 205인 직원의 이름을 '정중앙'으로 변경
SELECT * FROM EMPLOYEE
WHERE EMP_ID = 205;

UPDATE EMPLOYEE
SET EMP_NAME = '정중앙'
WHERE EMP_ID = 205;

-- 베이스테이블 확인
SELECT EMP_NAME FROM EMPLOYEE
WHERE EMP_ID = 205; -- 정중앙

-- V_EMPLOYEE에서도 확인
SELECT EMP_NAME FROM V_EMPLOYEE
WHERE EMP_ID = 205; -- 정중앙

ROLLBACK;

--------------------------------------------------------------------------------
COMMIT;

UPDATE V_EMPLOYEE
SET EMP_NAME = '정중앙'
WHERE EMP_ID = 205;

SELECT * FROM EMPLOYEE
WHERE EMP_ID = 205;

ROLLBACK;


/* 2. DML로 조작이 불가능한 경우

    1) VIEW에 포함되지 않은 컬럼을 조작하는 경우
    2) VIEW에 포함되지 않은 컬럼 중에
        베이스 테이블 컬럼이 NOT NULL 제약조건이 있는 경우
        
    3) VIEW의 컬럼이 산술 표현식으로 정의된 경우    
    4) VIEW 생성 시 서브쿼리에 GROUP BY절이 포함되어 있는 경우
    5) VIEW의 컬럼에 DISTINCT가 포함된 경우
    6) VIEW 생성에 사용된 서브쿼리에 JOIN이 작성되어 있는 경우
*/

-- 2) VIEW에 포함되지 않은 컬럼 중에
--     베이스 테이블 컬럼이 NOT NULL 제약조건이 있는 경우
CREATE VIEW V_JOB3
AS SELECT JOB_NAME FROM JOB;

INSERT INTO V_JOB3 VALUES('인턴');
-- ORA-01400: cannot insert NULL into ("KH"."JOB"."JOB_CODE")

-- VIEW를 이용해 DML을 수행하면
-- VIEW 자체의 데이터가 변하는 것이 아니라
-- 베이스 테이블의 값이 변하게 되고
-- 그 결과를 다시 VIEW가 투영하는 것


--------------------------------------------------------------------------------------------------------------------


--  1) VIEW에 포함되지 않은 컬럼을 조작하는 경우
CREATE OR REPLACE VIEW V_JOB3
AS SELECT JOB_CODE
    FROM JOB;

SELECT * FROM V_JOB3;

-- 1) VIEW에 포함되지 않은 컬럼을 조작하는 경우
INSERT INTO V_JOB3 VALUES('J8', '인턴');

UPDATE V_JOB3
SET JOB_NAME = '인턴'
WHERE JOB_CODE = 'J7';

DELETE FROM V_JOB2
WHERE JOB_NAME = '사원';


--INSERT INTO V_JOB2 VALUES('J8');

SELECT * FROM JOB;


--------------------------------------------------------------------------------------------------------------------

--   2) VIEW에 포함되지 않은 컬럼 중에
--       베이스 테이블 컬럼이 NOT NULL 제약조건이 있는 경우
-- INSERT시에 오류
CREATE OR REPLACE VIEW V_JOB3
AS SELECT JOB_NAME
    FROM JOB;
    
SELECT * FROM V_JOB3;

INSERT INTO V_JOB3 VALUES('인턴');
-- 베이스 테이블인 JOB에 JOB_CODE는 NOT NULL 제약조건이 지정되어있음. --> 에러

INSERT INTO V_JOB3 VALUES ('J8', '인턴');
--  뷰에 정의되지 않은 컬럼 조작 --> 에러

-- UPDATE/DELETE는 문제없이 가능
INSERT INTO JOB VALUES('J8','인턴');

SELECT * FROM V_JOB3;

UPDATE V_JOB3 SET JOB_NAME = '알바'
WHERE JOB_NAME = '인턴';

SELECT * FROM V_JOB3;
SELECT * FROM JOB;

DELETE FROM V_JOB3
WHERE JOB_NAME = '알바';

SELECT * FROM V_JOB3;
SELECT * FROM JOB;


--------------------------------------------------------------------------------------------------------------------

--  3) VIEW의 컬럼이 산술 표현식으로 정의된 경우
CREATE OR REPLACE VIEW EMP_SAL
AS SELECT EMP_ID, EMP_NAME, SALARY,
	    (SALARY + (SALARY*NVL(BONUS, 0)))*12 연봉
     FROM EMPLOYEE;

SELECT * FROM EMP_SAL;

-- 뷰에 산술 계산식이 포함된 경우 INSERT/UPDATE 시 에러 발생
INSERT INTO EMP_SAL VALUES(800, '정진훈', 3000000, 36000000);

UPDATE EMP_SAL
SET 연봉 = 8000000
WHERE EMP_ID = 200;


-- DELETE할 때는 사용 가능
COMMIT;

DELETE FROM EMP_SAL
WHERE 연봉 = 124800000;

SELECT * FROM EMP_SAL;
SELECT * FROM EMPLOYEE;

ROLLBACK;


--------------------------------------------------------------------------------------------------------------------

-- 4) VIEW 생성 시 서브쿼리에 GROUP BY절이 포함되어 있는 경우
CREATE OR REPLACE VIEW V_GROUPDEPT
AS SELECT DEPT_CODE, SUM(SALARY) 합계, AVG(SALARY) 평균
     FROM EMPLOYEE
     GROUP BY DEPT_CODE;
     
SELECT * FROM V_GROUPDEPT;

-- 그룹함수 또는 GROUP BY를 사용한 경우 INSERT/UPDATE/DELETE 시 에러 발생
INSERT INTO V_GROUPDEPT
VALUES ('D10', 6000000, 4000000);  -- 에러남

UPDATE V_GROUPDEPT
SET DEPT_CODE = 'D10'
WHERE DEPT_CODE = 'D1';

DELETE FROM V_GROUPDEPT
WHERE DEPT_CODE = 'D1';


--------------------------------------------------------------------------------------------------------------------

--   5) VIEW의 컬럼에 DISTINCT가 포함된 경우

CREATE OR REPLACE VIEW V_DT_EMP
AS SELECT DISTINCT JOB_CODE
     FROM EMPLOYEE;
     
SELECT * FROM V_DT_EMP;     
    
-- DISTINCT를 사용한 경우 INSERT/UPDATE/DELETE 시 에러 발생    
INSERT INTO V_DT_EMP VALUES(‘J9’);

UPDATE V_DT_EMP
SET JOB_CODE = 'J9'
WHERE JOB_CODE = 'J7';

DELETE FROM V_DT_EMP WHERE JOB_CODE = ‘J1’;


--------------------------------------------------------------------------------------------------------------------

-- 6) VIEW 생성에 사용된 서브쿼리에 JOIN이 작성되어 있는 경우
CREATE OR REPLACE VIEW V_JOINEMP
AS SELECT EMP_ID, EMP_NAME, DEPT_TITLE
     FROM EMPLOYEE
     JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
     
SELECT * FROM V_JOINEMP;

-- 뷰 정의 시 JOIN을 사용한 경우 INSERT/UPDATE 시 에러 발생
INSERT INTO V_JOINEMP VALUES(888, ‘조세오’, ‘인사관리부’);

UPDATE V_JOINEMP
SET DEPT_TITLE = '인사관리부'
WHERE EMP_ID = 219; 

-- 단 DELETE는 가능
COMMIT;

DELETE FROM V_JOINEMP
WHERE EMP_ID = 219;

SELECT * FROM V_JOINEMP;
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;

ROLLBACK;

--------------------------------------------------------------------------------------------------------------------

/* 3. VIEW의 구조
 
 - 뷰 정의 시 사용한 SELECT문이 TEXT라는 컬럼에 저장되어 있으며
   뷰가 호출되는 경우 TEXT컬럼에 기록된 SELECT문을 다시 실행하여
   그 결과를 보여주는 구조다
*/

-- USER_VIEWS : 사용자 정의 뷰를 확인하는 딕셔너리 뷰
SELECT * FROM USER_VIEWS;

"SELECT EMP_ID, EMP_NAME, DEPT_TITLE, NATIONAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
LEFT JOIN LOCATION ON(LOCATION_ID=LOCAL_CODE)
LEFT JOIN NATIONAL USING(NATIONAL_CODE)"

--------------------------------------------------------------------------------------------------------------------

/* 4. VIEW 옵션

  [작성법]
  CREATE [OR REPLACE] [FORCE | NOFORCE] VIEW 뷰이름[(별칭[, 별칭...])]
  AS 서브쿼리
  [WITH CHECK OPTION]
  [WHIT READ ONLY]
  
  WHIT CHECK OPTION : 옵션을 설정한 컬럼 값을 수정 불가능하게 만드는 옵션
  WHIT READ ONLY : 뷰를 읽기 전용으로 사용하는 옵션(SELECT만 가능)

*/
CREATE VIEW V_EMP_JOB
AS
SELECT EMP_ID 사번, EMP_NAME 이름, JOB_NAME 직급명,
  DECODE( SUBSTR(EMP_NO, 8, 1), '1', '남', '2', '여') 성별
FROM EMPLOYEE
NATURAL JOIN JOB;
-- ORA-00998: must name this expression with a column alias

SELECT * FROM V_EMP_JOB;


CREATE OR REPLACE VIEW V_EMP_JOB(사번, 이름, 직급명, 성별)
AS
SELECT EMP_ID, EMP_NAME, JOB_NAME,
  DECODE( SUBSTR(EMP_NO, 8, 1), '1', '남', '2', '여')
FROM EMPLOYEE
NATURAL JOIN JOB;

--------------------------------------------------------------------------------------------------------------------

-- FORCE / NOFORCE
-- VIEW 생성 시 사용되는 서브쿼리의 베이스 테이블이 존재하지 않아도
-- VIEW를 생성할 수 있다/없다 를 가르는 옵션
-- NOFORCE가 기본값
CREATE OR REPLACE FORCE VIEW V_EMP
AS SELECT TCODE, TNAME, TCONTENT
FROM TT;
-- 경고: 컴파일 오류와 함께 뷰가 생성되었습니다.

SELECT * FROM V_EMP;











